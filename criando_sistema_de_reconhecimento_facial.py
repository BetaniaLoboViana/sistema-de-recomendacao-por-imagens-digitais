# -*- coding: utf-8 -*-
"""Criando sistema de reconhecimento facial.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J7fFBKUS3yFiGjqYEX2bnio_K8h6c4Av
"""

pip install tensorflow opencv-python matplotlib

!pip install deepface

!pip install --upgrade tensorflow
!pip install --upgrade keras

!pip uninstall deepface
!pip install deepface

import cv2
from deepface import DeepFace
from matplotlib import pyplot as plt

# Carregar as imagens
img1 = cv2.imread("pessoas2.jpg")
img2 = cv2.imread("pessoas3.jpg")

# Carregar o classificador em cascata do OpenCV para detectar faces
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")

# Detectar faces nas imagens
faces_img1 = face_cascade.detectMultiScale(img1, scaleFactor=1.1, minNeighbors=5)
faces_img2 = face_cascade.detectMultiScale(img2, scaleFactor=1.1, minNeighbors=5)

# Verificar se encontrou faces nas imagens
if len(faces_img1) > 0 and len(faces_img2) > 0:
    # Desenhar um retângulo ao redor das faces detectadas
    for (x, y, w, h) in faces_img1:
        cv2.rectangle(img1, (x, y), (x + w, y + h), (0, 255, 0), 2)
    for (x, y, w, h) in faces_img2:
        cv2.rectangle(img2, (x, y), (x + w, y + h), (0, 255, 0), 2)

    # Exibir as imagens com as faces detectadas
    plt.subplot(1, 2, 1)
    plt.imshow(cv2.cvtColor(img1, cv2.COLOR_BGR2RGB))
    plt.title("Imagem 1 com Detecção de Rosto")

    plt.subplot(1, 2, 2)
    plt.imshow(cv2.cvtColor(img2, cv2.COLOR_BGR2RGB))
    plt.title("Imagem 2 com Detecção de Rosto")
    plt.show()

    # Realizar verificação facial após detecção
    result = DeepFace.verify("pessoas2.jpg", "pessoas3.jpg")
    print(result)
else:
    print("Não foi possível detectar faces em uma ou ambas as imagens.")

